// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tasks.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getTask = `-- name: GetTask :one
SELECT id, name, description, created_at, updated_at, done FROM tasks WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, id pgtype.UUID) (Task, error) {
	row := q.db.QueryRow(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Done,
	)
	return i, err
}

const insertTask = `-- name: InsertTask :one
INSERT INTO tasks(id, name, description)
VALUES (uuid_generate_v4(), $1, $2)
RETURNING id, name, description, created_at, updated_at, done
`

type InsertTaskParams struct {
	Name        string
	Description pgtype.Text
}

func (q *Queries) InsertTask(ctx context.Context, arg InsertTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, insertTask, arg.Name, arg.Description)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Done,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, name, description, created_at, updated_at, done FROM tasks ORDER BY created_at OFFSET $1 LIMIT $2
`

type ListTasksParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, listTasks, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Done,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET name = $2,
    description = $3,
    done = $4,
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, description, created_at, updated_at, done
`

type UpdateTaskParams struct {
	ID          pgtype.UUID
	Name        string
	Description pgtype.Text
	Done        pgtype.Bool
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTask,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Done,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Done,
	)
	return i, err
}
